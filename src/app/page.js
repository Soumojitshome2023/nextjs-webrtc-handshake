
"use client"
import { useEffect, useRef, useState } from 'react';

const WebRTC = () => {

    const user1VideoRef = useRef(null);
    const user2VideoRef = useRef(null);

    const [offer, setOffer] = useState('');
    const [answer, setAnswer] = useState('');
    const [peerConnection, setPeerConnection] = useState(null);

    // =============================== Init ===============================
    const init = async () => {
        const pc = new RTCPeerConnection();
        setPeerConnection(pc);

        const stream = await navigator.mediaDevices.getUserMedia({
            video: true,
            audio: false
        });
        user1VideoRef.current.srcObject = stream;

        const remoteStream = new MediaStream();
        user2VideoRef.current.srcObject = remoteStream;

        stream.getTracks().forEach((track) => {
            pc.addTrack(track, stream);
        });

        pc.ontrack = (event) => {
            event.streams[0].getTracks().forEach((track) => {
                remoteStream.addTrack(track);
            });
        };
    };

    // =========================== Create Offer ===========================
    const createOffer = async () => {
        peerConnection.onicecandidate = async (event) => {
            if (event.candidate) {
                setOffer(JSON.stringify(peerConnection.localDescription));
            }
        };

        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
    };

    // =========================== Create Answer ===========================
    const createAnswer = async () => {
        const receivedOffer = JSON.parse(offer);

        peerConnection.onicecandidate = async (event) => {
            if (event.candidate) {
                console.log('Adding answer candidate...:', event.candidate);
                setAnswer(JSON.stringify(peerConnection.localDescription));
            }
        };
        await peerConnection.setRemoteDescription(receivedOffer);

        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
    };

    // =========================== Add Answer ===========================
    const addAnswer = async () => {
        console.log('Add answer triggered');
        const receivedAnswer = JSON.parse(answer);
        console.log('answer:', receivedAnswer);
        if (!peerConnection.remoteDescription) {
            peerConnection.setRemoteDescription(receivedAnswer);
        }
    };

    useEffect(() => {
        init();
    }, []);

    return (
        <div>
            <h2>WebRTC, Passing SDP with no signaling.</h2>
            <video width="320" height="240" ref={user1VideoRef} autoPlay playsInline />
            <video width="320" height="240" ref={user2VideoRef} autoPlay playsInline />


            <p><b>Instructions: </b>Start by opening two tabs side by side and follow the steps below to pass SDP offer and answer. I will refer to each tab as User 1 and User 2</p>

            <p><b>Step 1:</b> User 1, click "Create offer" to generate SDP offer and copy offer from text area below.</p>
            <button onClick={createOffer}>Create Offer</button>
            <textarea id="offer-sdp" value={offer} onChange={(e) => { setOffer(e.target.value) }} placeholder="Offer SDP"></textarea>


            <p><b>Step 2:</b> User 2, paste SDP offer generated by user 1 into text area above, then click "Create Answer" to generate SDP answer and copy the answer from the text area below.</p>
            <button onClick={createAnswer}>Create Answer</button>

            <textarea id="answer-sdp" value={answer} onChange={(e) => { setAnswer(e.target.value) }} placeholder="Answer SDP"></textarea>

            <p><b>Step 3:</b> User 1, paste SDP offer generated by user 2 into text area above and then click "Add Answer"</p>
            <button onClick={addAnswer}>Add Answer</button>


        </div>
    );
};

export default WebRTC;
